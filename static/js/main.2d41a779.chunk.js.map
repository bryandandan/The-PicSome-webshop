{"version":3,"sources":["Context.js","components/Header.js","hooks/useHover.js","components/CartItem.js","pages/Cart.js","components/Image.js","utils/index.js","pages/Photos.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Header","cartClassName","useContext","cartItems","length","to","className","useHover","useState","hovered","setHovered","ref","useRef","enter","leave","useEffect","current","addEventListener","removeEventListener","CartItem","item","removeFromCart","iconClassName","onClick","id","src","url","width","Cart","buttonText","setButtonText","emptyCart","totalCostDisplay","toLocaleString","style","currency","cartItemElements","map","key","setTimeout","console","log","Image","img","toggleFavorite","addToCart","isFavorite","some","getClass","i","Photos","imageElements","allPhotos","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d41a779.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({children}) {\r\n    const [allPhotos, setAllPhotos] = useState([])\r\n    const [cartItems, setCartItems] = useState([])\r\n    \r\n    const url = \"https://raw.githubusercontent.com/bobziroll/scrimba-react-bootcamp-images/master/images.json\"\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => setAllPhotos(data))\r\n    }, [])\r\n    \r\n    function toggleFavorite(id) {\r\n        const updatedArr = allPhotos.map(photo => {\r\n            if(photo.id === id) {\r\n                return {...photo, isFavorite: !photo.isFavorite}\r\n            }\r\n            return photo\r\n        })\r\n        \r\n        setAllPhotos(updatedArr)\r\n    }\r\n    \r\n    function addToCart(newItem) {\r\n        setCartItems(prevItems => [...prevItems, newItem])\r\n    }\r\n    \r\n    function removeFromCart(id) {\r\n        setCartItems(prevItems => prevItems.filter(item => item.id !== id))\r\n    }\r\n    \r\n    function emptyCart() {\r\n        setCartItems([])\r\n    }\r\n    \r\n    return (\r\n        <Context.Provider value={{\r\n            allPhotos, \r\n            toggleFavorite, \r\n            cartItems, \r\n            addToCart, \r\n            removeFromCart, \r\n            emptyCart\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport {ContextProvider, Context}","import React, {useContext} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nimport {Context} from \"../Context\"\r\n\r\nfunction Header() {\r\n    const {cartItems} = useContext(Context)\r\n    const cartClassName = cartItems.length > 0 ? \"ri-shopping-cart-fill\" : \"ri-shopping-cart-line\"\r\n    return (\r\n        <header>\r\n            <Link to=\"/\"><h2>Pic Some</h2></Link>\r\n            <Link to=\"/cart\">\r\n                <i className={`${cartClassName} ri-fw ri-2x`}></i>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import {useState, useEffect, useRef} from \"react\"\r\n\r\nfunction useHover() {\r\n    const [hovered, setHovered] = useState(false)\r\n    const ref = useRef(null)\r\n    \r\n    function enter() {\r\n        setHovered(true)\r\n    }\r\n    \r\n    function leave() {\r\n        setHovered(false)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        ref.current.addEventListener(\"mouseenter\", enter)\r\n        ref.current.addEventListener(\"mouseleave\", leave)\r\n        \r\n        return () => {    \r\n            ref.current.removeEventListener(\"mouseenter\", enter)\r\n            ref.current.removeEventListener(\"mouseleave\", leave)\r\n        }\r\n    }, [])\r\n    \r\n    return [hovered, ref]\r\n}\r\n\r\nexport default useHover","import React, {useState, useContext} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport {Context} from \"../Context\"\r\nimport useHover from \"../hooks/useHover\"\r\n\r\nfunction CartItem({item}) {\r\n    const [hovered, ref] = useHover()\r\n    const {removeFromCart} = useContext(Context)\r\n    \r\n    const iconClassName = hovered ? \"ri-delete-bin-fill\" : \"ri-delete-bin-line\"\r\n    \r\n    return (\r\n        <div className=\"cart-item\">\r\n            <i \r\n                className={iconClassName} \r\n                onClick={() => removeFromCart(item.id)}\r\n                ref={ref}\r\n            >\r\n            </i>\r\n            \r\n            <img src={item.url} width=\"130px\" />\r\n            <p>$5.99</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nCartItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        url: PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default CartItem","import React, {useState, useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\nimport CartItem from \"../components/CartItem\"\r\n\r\nfunction Cart() {\r\n    const [buttonText, setButtonText] = useState(\"Place Order\")\r\n    const {cartItems, emptyCart} = useContext(Context)\r\n    const totalCost = 5.99 * cartItems.length\r\n    const totalCostDisplay = totalCost.toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\"})\r\n    \r\n    const cartItemElements = cartItems.map(item => (\r\n        <CartItem key={item.id} item={item} />\r\n    ))\r\n    \r\n    function placeOrder() {\r\n        setButtonText(\"Ordering...\")\r\n        setTimeout(() => {\r\n            console.log(\"Order placed!\")\r\n            setButtonText(\"Place Order\")\r\n            emptyCart()\r\n        }, 3000)\r\n    }\r\n    \r\n    return (\r\n        <main className=\"cart-page\">\r\n            <h1>Check out</h1>\r\n            {cartItemElements}\r\n            <p className=\"total-cost\">Total: {totalCostDisplay}</p>\r\n            {\r\n                cartItems.length > 0 ?\r\n                <div className=\"order-button\">\r\n                    <button onClick={placeOrder}>{buttonText}</button>\r\n                </div> :\r\n                <p>You have no items in your cart.</p>\r\n            }\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Cart","import React, {useState, useContext} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {Context} from \"../Context\"\r\nimport useHover from \"../hooks/useHover\"\r\n\r\nfunction Image({className, img}) {\r\n    const [hovered, ref] = useHover()\r\n    const {toggleFavorite, addToCart, cartItems, removeFromCart} = useContext(Context)\r\n    \r\n    function heartIcon() {\r\n        if(img.isFavorite) {\r\n            return <i className=\"ri-heart-fill favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-heart-line favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        }\r\n    }\r\n    \r\n    function cartIcon() {\r\n        const alreadyInCart = cartItems.some(item => item.id === img.id)\r\n        if(alreadyInCart) {\r\n            return <i className=\"ri-shopping-cart-fill cart\" onClick={() => removeFromCart(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-add-circle-line cart\" onClick={() => addToCart(img)}></i>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`${className} image-container`}\r\n            ref={ref}\r\n        >\r\n            <img src={img.url} className=\"image-grid\"/>\r\n            {heartIcon()}\r\n            {cartIcon()}\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n    className: PropTypes.string,\r\n    img: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        isFavorite: PropTypes.bool\r\n    })\r\n}\r\n\r\nexport default Image\r\n","export function getClass(i) {\r\n  if (i % 5 === 0) {\r\n      return 'big';\r\n  }\r\n  else if (i % 6 === 0) {\r\n      return 'wide'\r\n  }\r\n}","import React, {useContext} from \"react\"\r\n\r\nimport Image from \"../components/Image\"\r\nimport {Context} from \"../Context\"\r\nimport {getClass} from \"../utils\"\r\n\r\nfunction Photos() {\r\n    const {allPhotos} = useContext(Context)\r\n    \r\n    const imageElements = allPhotos.map((img, i) => (\r\n        <Image key={img.id} img={img} className={getClass(i)} />\r\n    ))\r\n    \r\n    return (\r\n        <main className=\"photos\">\r\n            {imageElements}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Photos","import React from \"react\"\nimport {Switch, Route} from \"react-router-dom\"\n\nimport Header from \"./components/Header\"\nimport Cart from \"./pages/Cart\"\nimport Photos from \"./pages/Photos\"\n\nfunction App() {    \n    return (\n        <div>\n            <Header />\n            <Switch>\n                <Route exact path=\"/\">\n                    <Photos />\n                </Route>\n                \n                <Route path=\"/cart\">\n                    <Cart />\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n      <App />\n  </Router>, \n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}